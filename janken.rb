# Write the logic that lets the player (yourself) enter "0 ~ 2".
class Player
    def hand
        # Display "Sentences that require the player to enter 0 to 2".
        puts "Please enter a number."
        puts "0: Goo, 1: Choki, 2: Par"
        # Get what the player has entered in the variable "input_hand" and assign it.
        #Hint! Use the "gets method".
        #input_hand =
        
        input_hand = gets.chomp

        while true 

            if ('0'..'2').cover? input_hand
                return input_hand
            else
                puts "Please enter a number between 0 ~ 2 ."
                puts "Please enter the number again. "
                puts "0: Goo, 1: Choki, 2: Par"
                input_hand = gets.chomp
            end
        end

        #puts input_hand 
        # If "input_hand" (acquired value) is either "0, 1, 2", it will escape from while, otherwise it will be repeated from the beginning.
        #Hint! Use "while" and "if".
        # Let's implement according to the example of the type after * * Be careful of commenting out when implementing
        # while true
        #while true 
            #Write a #if condition (if "input_hand" (acquired value) is either "0, 1, 2")
            # Returns "input_hand" (obtained value) as is.
            #Hint! Use "return".
            # else * Other than the conditions
            # Display "Sentences that require the player to enter 0 to 2".
            #puts "Please enter the number again."
            #puts "0: Goo, 1: Choki, 2: Par"
            #Get what the player has entered in the variable "input_hand" and assign it.
            # end if statement end
            # end while statement end
            #if (input_hand == 0 || input_hand == 1 || input_hand == 2)
                #return input_hand 
            
           # else 
                #puts "Please enter a number between 0 ~ 2 ."
                #puts "Please enter the number again. "
                #puts "0: Goo, 1: Choki, 2: Par"
                #input_hand = gets.chomp.to_i
                #puts input_hand 
            #end
        #end
    end
end

# Write the logic that the enemy randomly generates a value of "0 ~ 2".
class Enemy
  def hand
    #Randomly output the values of goo, choki, and par.
    return rand(0..2).to_i
  end
end

# Write the logic to play rock-paper-scissors with "0 ~ 2" entered by the player (yourself) and "0 ~ 2" randomly generated by the enemy, and output the result on the console.
class Janken
    def pon(player_hand, enemy_hand)
        # Substitute ["goo", "choki", "par"] for the variable "janken".
        janken = ["Goo", "Choki", "Par"]
        # "The opponent's hand is # {value generated by the enemy}." Is output.
        puts "The opponent's hand is #{janken [enemy_hand]}."
        #Create logic to play rock-paper-scissors from the return value of the Player class and the return value of the Enemy class.
        # Let's implement according to the example of the type after * * Be careful of commenting out when implementing
        #If the return value (player_hand) of the #if condition and the return value (enemy_hand) of the Enemy class are the same
        if (player_hand == enemy_hand )  # "Aiko" is output.
            puts "Aiko"
            # Returns "true" to run rock-paper-scissors repeatedly.
             #Hint! Use "return".
            return true 
            # elsif If the combination is as follows
            #(player_hand == 0 && enemy_hand == 1) || (player_hand == 1 && enemy_hand == 2) || (player_hand == 2 && enemy_hand == 0)
        elsif (player_hand == 0 && enemy_hand == 1) || (player_hand == 1 && enemy_hand == 2) || (player_hand == 2 && enemy_hand == 0)
            puts  "You win."
            return false
            #End #while Returns "false" to end rock-paper-scissors.
             # else * Other than the conditions
            # Output "You are losing".
        else 
            puts "You are losing."
             #End #while Returns "false" to end rock-paper-scissors.
            # end if statement end
            return false 
        end
    end 
end

  # Write the logic to execute the rock-paper-scissors game.
class Action
    # By using self, you can call the jankenpon method using the class name without instantiating the Action.
    def self.jankenpon
      #Substitute the instantiated Player for the variable "player".
      player = Player.new
      # Assign an instantiation of Enemy to the variable "enemy".
      enemy = Enemy.new
      # Assign an instantiation of Janken to the variable "janken".
      janken = Janken.new
      # Assign "true" to the variable "next_game". * This is because the iterative process is executed while while forever unless "next_game" becomes "false".
      next_game = true 
      # Let's implement according to the example of the type after * * Be careful of commenting out when implementing。
      # while next_game
        while true 
            # Substitute the value (return value) returned by executing rock-paper-scissors into the variable "next_game".
            # I'm running rock-paper-scissors with "janken.pon (player.hand, enemy.hand)".
            next_game = janken.pon(player.hand, enemy.hand)
            # When "false" is returned in the execution result of rock-paper-scissors, this while is terminated. When "true" is returned, it repeats that number of times.
             # while文のend
            if !next_game
                break
            end

        end 
    #end
    end
end

# Call the jankenpon method with the class name.
Action.jankenpon